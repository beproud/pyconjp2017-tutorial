=====================
第1部 Python基礎
=====================

第1部ではPythonプログラミングに必要な基礎知識を学んでいきます。

演習には PyQ を利用します。

.. contents:: 目次

はじめに
====================

- 多少変なプログラムを書いて実行したくらいではpyq, お手持ちのPCは壊れないので、安心して間違えてください

  - プログラムに問題がある場合はプログラムを実行した時にエラーメッセージが出力されます。そのメッセージによって問題に気づくことができますので、プログラムを書くときは細かく実行してエラーがでないかを確認していくと途中でつまずくことが少なくなります

- プログラムを書くときは全角半角に注意してください

  - 空白(スペース)を入力する際、全角だとエラーになります。半角スペースを入力してください

- 別の言語なら知っているという方や以前プログラミングについて学んだことがあるような方は講義中にPyQの演習にどんどん取り掛かってもらって構いません。

Pythonとは
================

* Pythonは元々は教育用言語として開発されました。しかし機能はほかのプログラミング言語に引けを取らず、実際のシステム開発や研究の分野で数多く利用されています。

* PythonはRubyやPHPをはじめとするコンパイル不要な `インタプリタ言語` の一種です。

  * 書けばすぐ動きます。C言語やJava, Go言語のような `コンパイル言語` では実行前にコンパイルという作業が必要になります。

* Pythonはインデントとよばれるスペースやタブを使った記述を強制されるため一般的にはきれいなコードになると言われます。

まずは動かそう
====================

- まずは PyQ のチュートリアルで、プログラミングの第一歩を踏み出しましょう！

操作
-----

1. https://pyq.jp/login にアクセス
2. 配布したアカウントでログイン

   - TODO: ここに書くのもあれなので印刷して配布とかでいい？

3. チュートリアルにチャレンジ

   - https://pyq.jp/quests/tutorial/try/

変数
=========

変数とは、プログラムの中で扱う値に名前をつけるものです。

- `=` の左辺に変数の名前、右辺に値を記述することで、変数を使うことができます

.. code-block :: python

   a = 1
   b = a + 2

- コードの解説

  - 1行目は、 `a に 1 を代入する` と表現されます。この行以降で変数aを `参照` できるようになります

    - 変数に代入されている値を読み込んで利用することを `参照する` といいます

  - 2行目では変数bへの代入時に早速変数aを参照しています。詳しくは以下のことを行なっています

    1. 変数a を参照して値(=1)を読み込む
    2. 1 と 2 を加算(a + 2 の計算)
    3. 加算した結果(=3)を b に代入


- 変数を利用することで、機械に値を覚えさせ、好きなタイミングで参照することができます

- コラム

  * 一度も代入が行われていない `変数` は参照することができません。下記のように代入していない変数「z」を参照するコードを実行すると、エラーが発生します。

  .. code-block:: python

    z

  発生するエラー::

    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    NameError: name 'z' is not defined


文字列
================

文字列は、「文字が並んでいるもの」を表す値です

- 文字列を利用するには、値を `" (ダブルクォーテーション)` または `' (シングルクォーテーション)` で囲みます

.. code-block :: python

  print("PyConJP Tutorial 2017")
  print("~ Python を右腕にしよう ~")

- printは値の出力に利用する関数です。関数の説明は後ほどでてきます。

文字列の結合
---------------

文字列は、文字列同士を `+` でつなげることで、一つの文字列に結合できます

.. code-block :: python

  message = "Hello" + "World"
  print(message)

- このプログラムを実行すると、 `HelloWorld` が出力されます

リスト
========

リストは変数型の一種で、リスト全体を `[` と `]` で囲み、各要素を `, (カンマ)` で区切って記述します

.. code-block :: python

  hiyoko_list = ["オス", "メス", "オス", "メス"]

- リストは、変数の後ろに `[番号]` と書くことで、中の要素を参照できます

  - この時の番号を `インデックス` と呼びます

.. code-block :: python

  print(hiyoko_list[0]) # => オス
  print(hiyoko_list[1]) # => メス

- 要素のインデックスが1から始まるのではなく、0から始まるのはPython以前のプログラミング言語からの慣習です

リストの操作
--------------

次のように リスト型の値の後ろに `.append()` と記述することでリストの末尾に要素を追加できます

.. code-block ::

  a = ["x", "y"]
  a.append("z")
  print(a[2])  # => z と出力

- `.append()` はリストオブジェクトのメソッドです。メソッドについては後で出てきます。

要素の削除も行えます。リストに `.pop()` と記述することでリストの末尾に要素を削除できます

.. code-block ::

  a = ["x", "y"]
  print(a[1])  # => "y"
  a.pop()
  print(a[1])  # => 要素がないので `IndexError` というエラーになります

削除する要素の位置を指定したい場合は `.pop(1)` のようにインデックスで指定します

.. code-block ::

  a = ["x", "y", "z"]
  a.pop(1)
  print(a[1])  # => z が表示される ("y" が削除され "z" が前にひとつずれる


コメント
==========

コメント文はプログラムコードを説明したり、プログラム中にメモを書く際に使います。

- コメントはプログラム中で ``#`` の後に書きます。 ``#`` の文字から行末までがコメントとして扱われます。
- コメント部分はPythonからは実行されず、解釈もされません。

  - コードを自分で書いてみる時、コメントは省いてもプログラムの動きはかわりません

.. code-block:: python

  # これはコメントです
  print("これは実行されます")  # コードの後ろにもコメントはかけます
  # print("これは実行されません")


プログラムの流れと制御フロー
=============================

- プログラムは上から下に1行ずつ実行されます
- 制御フロー文と呼ばれる特殊な文を書くことで、プログラムが実行される順番や回数を制御できます
- ここでは、代表的な制御フローである if文, for文を学びます

if 文
-------

if文は条件に合致した場合のみプログラムを実行する文です

- 次のコードは変数 age の値が 20 以上だった場合、「大人ですね」と表示するプログラムです

.. code-block :: python

  if age >= 20:
      print("大人ですね")

- コードの解説:

  - if文では、 `if` と `: (コロン)` の間に `条件式` を書きます

    - 1行目の `age >= 20` が条件式です。変数a が 20 以上かどうかを判定しています。条件式についてはあとで出てきます。

  - 2行目の `print("大人ですね")` が、条件に一致する場合に実行されるコードです

- 条件に合致した場合に実行される対象は、if 文に続けて書かれた `インデント(字下げ)` されたコードのまとまり(コードブロック)です

  .. code-block :: python

    if age >= 20:
        print("大人ですね")
        print("条件に当てはまれば")
        print("この文も実行されます")

    print("この文はifと関係なく常に実行されます")

  - インデントを行うには、一般的には4つのスペースを入力します


条件式
--------

- 条件式は、真偽値を返す式を記述します

  - わかりやすく表すと「yesかnoか」ですが、Pythonでは真(yes)を `True` 、偽(no)を `False` と表します

.. code-block :: python

  if True:
      print("この文は常に実行されます")

  if False:
      print("この文は常に実行されません")

条件式では以下の演算子がよくつかわれます

.. list-table ::
  :header-rows: 1

  - - 演算子
    - 説明
  - - `==`
    - 等しい
  - - `!=`
    - 等しくない
  - - `>`
    - より大きい
  - - `<`
    - より小さい
  - - `>=`
    - 以上
  - - `<=`
    - 以下


if ~ else文
--------------

if ~ else文は条件に一致した場合としなかった場合にそれぞれ違うコードを記述する文です

.. code-block :: python

  if age >= 20:
      print("大人ですね")
  else:
      print("子供ですね")

for 文
----------------

for 文は繰り返しコードを実行する文です

- 次のコードは 変数 hiyoko_list の中のヒヨコたちがオスかメスか判定するプログラムです

.. code-block:: python

  hiyoko_list = ["オス", "メス", "オス", "メス"]

  for hiyoko in hiyoko_list:
      if hiyoko == "オス":
          print("このヒヨコはオス")
      else:
          print("このヒヨコはメス")

- コードの解説

  - 1行目: 変数 hiyoko_list にリストの値を代入しています。リストの要素には、"オス" または "メス" の文字列が入っています
  - 2行目: 空行です。プログラムを見やすくするために空行を入れることができます。
  - 3行目: for文がでてきました。for文は `for 変数 in ループ対象:` の形で記述します

    - for文では、以下の順番でプログラムが実行されます

      1. ループ対象(hiyoko_list) の変数の中から、先頭の要素を参照する
      2. 1. で参照した値を変数(hiyoko)に代入
      3. for文に続けてインデントされたコードブロックを実行します
      4. ループ対象の次の要素を参照し、2, 3の流れを要素がなくなるまで繰り返す


1章前半の演習
===============

- `健康診断のお知らせ作成プログラムを作成 <https://pyq.jp/quests/notification_exercise/try/>`_
- `水ボトルの注文数を決定しよう <https://pyq.jp/quests/water_exercise/try/>`_
- `当番の一覧表示プログラム <https://pyq.jp/quests/duty_exercise/try/>`_


関数
===========

- 関数とは、どのプログラミング言語でも使われるとても大切な概念です
- 変数は「値」に対して名前をつけたものでしたが、関数は「処理」に対して名前がついたものです
- 例えば `len()` という関数は、「与えられたリストの長さを計算する処理」を行います

  .. code-block :: python

     l = ['A', 'B', 'C', 'D']
     l_length = len(l)
     print(l_length)  # => 4

- 関数は `関数名()` の形で「呼び出し」ます(処理を実際に行わせることを呼び出すと言います）
- 関数の `()` の中には、関数に与える値を指定します。その値を「引数」と呼びます
- 関数は呼び出しを行なうと「値を返す」ものがあります。返された値は、変数に代入したり、別の関数の引数として与えることができます。

  - 上の用語を使って`len()` 関数を表現しなおすと、 `len()` は 「引数」で与えられたリストの長さを「返す」関数といえます

- 関数は上の `len()` 関数のように、引数で与える値と、返り値があらかじめ決まっています。 `len()` 以外にも便利な関数は数多くありますが、プログラミングを上達していく上では、関数の引数・返り値を一つ一つ学んでいくということが必要になります。

モジュール
=============================

* モジュールとは関数やクラスなどをまとめたPythonファイルです。
* モジュールは `インポート` することで使えます。

*  `datetime` という日時を操作するライブラリは以下のように `import` 文を用いることで利用できるようになります。

.. code-block:: python

  import datetime

  one_day = datetime.datetime(2016, 1, 31)  # datetimeモジュールのdatetimeを使います。
  print(one_day)


以下のように出力されます::

  2016-01-31 00:00:00

* `import` 文の前に `from` をつけて以下のように記述することができます。

.. code-block:: python

  from datetime import datetime

  one_day = datetime(2016, 1, 31)
  print(one_day)

- このように記述することで、モジュールの中で何を利用するのかがわかりやすくなります

ファイル操作
============

ファイルを読む・または書く(作る)という処理をプログラムから行えます。

例えば以下は test.txt という名前のテキストファイルを読み込んで内容を出力するプログラムです

.. code-block :: python

  with open('test.txt', encoding='utf-8') as fp:
     data = fp.read()
     print(data)

- ファイルはプログラムでは「開く」「読みこむ、または書き込む」「閉じる」という３ステップが操作します。
- 「閉じる」のを忘れてしまうと、OSが同時にファイルを開ける数の上限に達してしまい新しくファイルを開けなくなるなど、思いもよらないエラーを招くことがあります。
- with文 はよく open と組み合わせて使われる構文で、組み合わせて使うことで最後の「閉じる」ステップをプログラムが自動でおこなってくれます
- コードの解説:

  - 1行目で 'test.txt' というファイルを開き、fp という変数に入れます
  - 2行目で fp に対して read (読み込み) を実行し、結果を data という変数に代入しています
  - 3行目で 読み込んだ data を出力しています
  - 「閉じる」コードは記述していませんが、これはwithが裏でやってくれています

- note: with文は open 以外にも様々な使い方ができます。詳しくは `with文とコンテキストマネージャ <https://docs.python.jp/3/reference/datamodel.html#context-managers>`_ を参照ください

パス
------

- ファイルを読み書きする際「どこのファイル」にアクセスするかの場所を表す文字列を「パス」といいます
- パスは、ディレクトリ(フォルダ)を `/` (windowsでは `¥` ) で区切った形で表されます
- パスの具体例: `/Users/furi/Desktop/neko.png`

演習
====

- TDB

リンク
=============================
* `第2部 <2.rst>`_
* `第3部 <3.rst>`_
* `pyq <https://pyq.jp>`_
