=====================
第1部 Python基礎
=====================

第1部ではPythonプログラミングに必要な基礎知識を学んでいきます。

演習には PyQ を利用します。

.. contents:: 目次

はじめに
====================

- どんなに頑張ってもpyq, pcはこわれないので安心して間違えてください
- プログラムを書くときは全角半角に注意してください

  - 空白(スペース)を入力する際、全角だとエラーになります。半角スペースを入力してください

- 別の言語なら知っているという方や以前プログラミングについて学んだことがあるような方は講義中にPyQの演習にどんどん取り掛かってもらって構いません。

まずは動かそう
====================

- まずは PyQ のチュートリアルで、プログラミングの第一歩を踏み出しましょう！

操作
-----

1. https://pyq.jp/login にアクセス

   - TODO: チームのログインURLに直す

2. 配布したアカウントでログイン

   - TODO: ここに書くのもあれなので印刷して配布とかでいい？

3. チュートリアルにチャレンジ

   - https://pyq.jp/quests/tutorial/try/

Pythonとは
================

* Pythonは元々は教育用言語として開発されました。しかし機能はほかのプログラミング言語に引けを取らず、実際のシステム開発や研究の分野で数多く利用されています。

* PythonはRubyやPHPをはじめとするコンパイル不要な `インタプリタ言語` の一種です。

  * 書けばすぐ動きます。C言語やJava, Go言語のような `コンパイル言語` では実行前にコンパイルという作業が必要になります。

* Pythonはインデントとよばれるスペースやタブを使った記述を強制されるため一般的にはきれいなコードになると言われます。

変数
=========

変数とは、プログラムの中で扱う値に名前をつけるものです。

- `=` の左辺に変数の名前、右辺に代入する値を記述することで、変数を使うことができます

.. code-block :: 具体例

   a = 1
   b = a + 2

- 1行目は、 `a に 1 を代入する` とよく表現されます
- 2行目では早速変数a を利用しています。詳しくは以下のことを行なっています

  1. a に入っている値(=1)を読み込む
  2. 1 と 2 を加算
  3. 加算した結果を b に代入

  - ここで、変数の値を読み込んで利用することを `参照する` といいます

- 変数を利用することで、値を機械に覚えさせ、好きなタイミングで参照することができます

文字列
================

文字列は、「文字が並んでいるもの」を表す値です

.. code-block :: python

  print("PyConJP Tutorial 2017")
  print("~ Python を右腕にしよう ~")

- print文は値の出力に利用します

- `TODO:` あとで必要そうな知識を足す

コメント
==========

コメント文はプログラムコードを説明したり、プログラム中にメモを書く際に使います。

- コメントはプログラム中で ``#`` の後に書きます。 ``#`` の文字から行末までがコメントとして扱われます。
- コメント部分はPythonからは実行されず、解釈もされません。

  - コードを自分で書いてみる時、コメントは省いてもプログラムの動きはかわりません

.. code-block:: python

  # これはコメントです
  print("これは実行されます")  # コードの後ろにもコメントはかけます
  # print("これは実行されません")


プログラムの流れと制御フロー
=============================

- プログラムは上から下に1行ずつ実行されます
- 制御フロー文と呼ばれる特殊な文を書くことで、プログラムが実行される順番や回数を制御できます
- ここでは、代表的な制御フローである if文, for文を学びます

if 文
-------

条件に合致した場合のみプログラムを実行する文です

- 次のコードは変数 age の値が 20 以上だった場合、「大人ですね」と表示するプログラムです

.. code-block :: python

  if age >= 20:
      print("大人ですね")

- if 文の後ろの `インデント` を下げたコードのまとまり(コードブロック)が実行する対象になります

  .. code-block :: python

    if age >= 20:
        print("大人ですね")
        print("条件に当てはまればこの文も実行されます")

    print("この文はifと関係なく常に実行されます")

- `if` と `:` の間に `条件式` を書きます

if ~ else文
--------------

条件に一致した場合としなかった場合にそれぞれ違うコードを記述する文です

.. code-block :: python

  if age > 20:
      print("大人ですね")
  else:
      print("子供ですね")

for 文 (リスト)
--------

繰り返しコードを実行する文です

- 次のコードは 変数 hiyoko_list の中のヒヨコたちがオスかメスか判定するプログラムです

.. code-block:: python

  hiyoko_list = ["オス", "メス", "オス", "メス"]

  for hiyoko in hiyoko_list:
      if hiyoko == "オス":
          print("このヒヨコはオス")
      else:
          print("このヒヨコはメス")

- for文では、以下の順番でプログラムが実行されます

  1. `in` と `:` の間に記述した `シークエンス型` (順番をもつデータ型)の中の1番目の要素を参照する
  2. 1. で参照した値を `for` と `in` の間に記述した変数に代入
  3. インデントされたコードブロックを実行します
  4. 2番目, 3番目と上の流れを繰り返す

- 上のコード例では、シークエンス型の一種である、 `リスト型` を使っています
- リストは、変数の後ろに `[0]` と書くことで、中の要素を参照できます

.. code-block :: python

  hiyoko_list = ["オス", "メス", "オス", "メス"]
  print(hiyoko_list[0]) # => オス
  print(hiyoko_list[1]) # => メス

- 要素の番号が1から始まるのではなく、0から始まるのはPython以前のプログラミング言語からの慣習です

range
------

WIP

関数
===========

- 関数とは、どのプログラミング言語でも使われるとても大切な概念です
- 変数は「値」に対して名前をつけたものでしたが、関数は「処理」に対して名前がついたものです
- 例えば `len()` という関数は、「与えられたリストの長さを計算する処理」を行います

  .. code-block :: python
  
     l = ['A', 'B', 'C', 'D']
     l_length = len(l)
     print(l_length)  # => 4

- 関数は `関数名()` の形で「呼び出し」ます(処理を実際に行わせることを呼び出すと言います）
- 関数の `()` の中には、関数に与える値を指定します。その値を「引数」と呼びます
- 関数は呼び出しを行なうと「値を返す」ものがあります。返された値は、変数に代入したり、別の関数の引数として与えることができます。

  - 上の用語を使って`len()` 関数を表現しなおすと、 `len()` は 「引数」で与えられたリストの長さを「返す」関数といえます
  
- 関数は上の `len()` 関数のように、引数で与える値と、返り値があらかじめ決まっています。 `len()` 以外にも便利な関数は数多くありますが、プログラミングを上達していく上では、関数の引数・返り値を一つ一つ学んでいくということが必要になります。

リストの操作
===============

次のように リスト型の値の後ろに `.append()` と記述することでリストの末尾に要素を追加できます

.. code-block ::

  a = ["x", "y"]
  a.append("z")
  print(a[2])  # => z と出力

- `.append()` はリストオブジェクトのメソッドですが、オブジェクト・メソッドについての詳細は今回は扱いません
  
要素の削除も行えます。リストに `.pop()` と記述することでリストの末尾に要素を削除できます

.. code-block ::

  a = ["x", "y"]
  a.pop()
  print(a[1])  # => 要素がないので `IndexError` というエラーになります

削除する要素の位置を指定したい場合は `.pop(1)` のようにインデックスで指定します

.. code-block ::

  a = ["x", "y", "z"]
  a.pop(1)
  print(a[1])  # => z が表示される ("y" が削除され "z" が前にひとつずれる


モジュール
=============================
* モジュールとは関数やクラスなどをまとめたPythonファイルです。
* モジュールは `インポート` することで使えます。

*  `datetime` という日時を操作するライブラリは以下のように `import` 文を用いることで利用できるようになります。

.. code-block:: python

  import datetime

  one_day = datetime.datetime(2016, 1, 31)  # datetimeモジュールのdatetimeを使います。
  print(one_day)


以下のように出力されます::

  2016-01-31 00:00:00


コラム
------------------
* 先ほどの記述方法では `datetime` モジュールの `datetime` ということで ``datetime.datetime(2016, 1, 31)`` のように書く必要がありました。
* `import` 文の前に `from` をつけて以下のように記述することができます。

.. code-block:: python

  from datetime import datetime

  one_day = datetime(2016, 1, 31)
  print(one_day)


* こちらの方法だとライブラリ名を省略して `datetime(2016, 1, 31)` のように短縮した形式で記述することができます。
* 必要な物だけを `import` し、記述量を減らすことができる記述方法です。必須ではありませんが、便利なのでぜひ使ってみてください。
* モジュールをディレクトリでまとめたものを `パッケージ` といいます。モジュールと同じように `import` できます。
* これらを公開し、インストールすることで利用できる形式にしたものをライブラリといい、 `PyPI <https://pypi.python.org/pypi>`_ にアップロードされています。

ファイル操作
============

ファイルを読む・または書く(作る)という処理をプログラムから行えます。

例えば以下は test.txt という名前のテキストファイルを読み込んで内容を出力するプログラムです

.. code-block :: python

  with open('test.txt', encoding='utf-8') as fp:
     data = fp.read()
     print(data)

- ファイルはプログラムでは「開く」「読みこむ、または書き込む」「閉じる」という３ステップが操作します。
- 「閉じる」のを忘れてしまうと、OSが同時にファイルを開ける数の上限に達してしまい新しくファイルを開けなくなるなど、思いもよらないエラーを招くことがあります。
- with文 はよく open と組み合わせて使われる構文で、組み合わせて使うことで最後の「閉じる」ステップをプログラムが自動でおこなってくれます
- コードの解説

  - 1行目で 'test.txt' というファイルを開き、fp という変数に入れます
  - 2行目で fp に対して read (読み込み) を実行し、結果を data という変数に代入しています
  - 3行目で 読み込んだ data を出力しています
  - 「閉じる」コードは記述していませんが、これはwithが裏でやってくれています

- note: with文は open 以外にも様々な使い方ができます。詳しくは `with文とコンテキストマネージャ <https://docs.python.jp/3/reference/datamodel.html#context-managers>`_ を参照ください
  
パス
------

- `TODO` いやー相対パスとか絶対パスとか難しいからおんなじフォルダにつっこんでおけばよくないかなー

- ファイルを読み書きする際「どこのファイル」にアクセスするかの場所を表す文字列を「パス」といいます
- パスは、ディレクトリ(フォルダ)を `/` (windowsでは `¥` ) で区切った形で表されます
- パスの具体例: `/Users/furi/Desktop/neko.png`

演習
====

- `健康診断のお知らせ作成プログラムを作成 <https://pyq.jp/quests/notification_exercise/try/>`_
- `水ボトルの注文数を決定しよう <https://pyq.jp/quests/water_exercise/try/>`_
- `当番の一覧表示プログラム <https://pyq.jp/quests/duty_exercise/try/>`_

リンク
=============================
* `第2部 <2.rst>`_
* `第3部 <3.rst>`_
* `pyq <https://pyq.jp>`_
